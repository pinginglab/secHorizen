/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as escapeStringNs from 'escape-string-regexp';
/** @type {?} */
var escapeString = escapeStringNs;
var NgxSelectOption = /** @class */ (function () {
    function NgxSelectOption(value, text, disabled, data, _parent) {
        if (_parent === void 0) { _parent = null; }
        this.value = value;
        this.text = text;
        this.disabled = disabled;
        this.data = data;
        this._parent = _parent;
        this.type = 'option';
        this.cacheRenderedText = null;
    }
    Object.defineProperty(NgxSelectOption.prototype, "parent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._parent;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} sanitizer
     * @param {?} highlightText
     * @return {?}
     */
    NgxSelectOption.prototype.renderText = /**
     * @param {?} sanitizer
     * @param {?} highlightText
     * @return {?}
     */
    function (sanitizer, highlightText) {
        if (this.cacheHighlightText !== highlightText || this.cacheRenderedText === null) {
            this.cacheHighlightText = highlightText;
            if (this.cacheHighlightText) {
                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml((this.text + '').replace(new RegExp(escapeString(this.cacheHighlightText), 'gi'), '<strong>$&</strong>'));
            }
            else {
                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml(this.text);
            }
        }
        return this.cacheRenderedText;
    };
    return NgxSelectOption;
}());
export { NgxSelectOption };
if (false) {
    /** @type {?} */
    NgxSelectOption.prototype.type;
    /** @type {?} */
    NgxSelectOption.prototype.highlightedText;
    /** @type {?} */
    NgxSelectOption.prototype.active;
    /** @type {?} */
    NgxSelectOption.prototype.cacheHighlightText;
    /** @type {?} */
    NgxSelectOption.prototype.cacheRenderedText;
    /** @type {?} */
    NgxSelectOption.prototype.value;
    /** @type {?} */
    NgxSelectOption.prototype.text;
    /** @type {?} */
    NgxSelectOption.prototype.disabled;
    /** @type {?} */
    NgxSelectOption.prototype.data;
    /** @type {?} */
    NgxSelectOption.prototype._parent;
}
var NgxSelectOptGroup = /** @class */ (function () {
    function NgxSelectOptGroup(label, options) {
        if (options === void 0) { options = []; }
        this.label = label;
        this.options = options;
        this.type = 'optgroup';
        this.filter(function () { return true; });
    }
    /**
     * @param {?} callbackFn
     * @return {?}
     */
    NgxSelectOptGroup.prototype.filter = /**
     * @param {?} callbackFn
     * @return {?}
     */
    function (callbackFn) {
        this.optionsFiltered = this.options.filter(function (option) { return callbackFn(option); });
    };
    return NgxSelectOptGroup;
}());
export { NgxSelectOptGroup };
if (false) {
    /** @type {?} */
    NgxSelectOptGroup.prototype.type;
    /** @type {?} */
    NgxSelectOptGroup.prototype.optionsFiltered;
    /** @type {?} */
    NgxSelectOptGroup.prototype.label;
    /** @type {?} */
    NgxSelectOptGroup.prototype.options;
}
/** @typedef {?} */
var TSelectOption;
export { TSelectOption };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNlbGVjdC5jbGFzc2VzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNlbGVjdC1leC8iLCJzb3VyY2VzIjpbIm5neC1zZWxlY3Qvbmd4LXNlbGVjdC5jbGFzc2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEtBQUssY0FBYyxNQUFNLHNCQUFzQixDQUFDOztBQUd2RCxJQUFNLFlBQVksR0FBRyxjQUFjLENBQUM7QUFFcEMsSUFBQTtJQU1FLHlCQUFtQixLQUFzQixFQUNwQixNQUNBLFVBQ0EsTUFDQzs7UUFKSCxVQUFLLEdBQUwsS0FBSyxDQUFpQjtRQUNwQixTQUFJLEdBQUosSUFBSTtRQUNKLGFBQVEsR0FBUixRQUFRO1FBQ1IsU0FBSSxHQUFKLElBQUk7UUFDSCxZQUFPLEdBQVAsT0FBTztvQkFUVyxRQUFRO2lDQWlCUixJQUFJO0tBUHpDOzBCQUVVLG1DQUFNOzs7OztZQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQzs7Ozs7Ozs7OztJQU1qQixvQ0FBVTs7Ozs7Y0FBQyxTQUF1QixFQUFFLGFBQXFCO1FBQzVELElBQUksSUFBSSxDQUFDLGtCQUFrQixLQUFLLGFBQWEsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEtBQUssSUFBSSxFQUFFO1lBQzlFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxhQUFhLENBQUM7WUFDeEMsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7Z0JBQ3pCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FDL0UsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLHFCQUFxQixDQUNqRixDQUFDLENBQUM7YUFDTjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN6RTtTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7OzBCQXJDdEM7SUF1Q0MsQ0FBQTtBQWpDRCwyQkFpQ0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUQsSUFBQTtJQUtJLDJCQUFtQixLQUFhLEVBQ2I7O1FBREEsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNiLFlBQU8sR0FBUCxPQUFPO29CQUxZLFVBQVU7UUFNNUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFNLE9BQUEsSUFBSSxFQUFKLENBQUksQ0FBQyxDQUFDO0tBQzNCOzs7OztJQUVNLGtDQUFNOzs7O2NBQUMsVUFBMkM7UUFDckQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFDLE1BQXVCLElBQUssT0FBQSxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQWxCLENBQWtCLENBQUMsQ0FBQzs7NEJBcERwRztJQXNEQyxDQUFBO0FBYkQsNkJBYUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RvbVNhbml0aXplciwgU2FmZUh0bWx9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0ICogYXMgZXNjYXBlU3RyaW5nTnMgZnJvbSAnZXNjYXBlLXN0cmluZy1yZWdleHAnO1xuaW1wb3J0IHtJTmd4U2VsZWN0T3B0R3JvdXAsIElOZ3hTZWxlY3RPcHRpb24sIElOZ3hTZWxlY3RPcHRpb25CYXNlLCBUTmd4U2VsZWN0T3B0aW9uVHlwZX0gZnJvbSAnLi9uZ3gtc2VsZWN0LmludGVyZmFjZXMnO1xuXG5jb25zdCBlc2NhcGVTdHJpbmcgPSBlc2NhcGVTdHJpbmdOcztcblxuZXhwb3J0IGNsYXNzIE5neFNlbGVjdE9wdGlvbiBpbXBsZW1lbnRzIElOZ3hTZWxlY3RPcHRpb24sIElOZ3hTZWxlY3RPcHRpb25CYXNlIHtcbiAgICByZWFkb25seSB0eXBlOiBUTmd4U2VsZWN0T3B0aW9uVHlwZSA9ICdvcHRpb24nO1xuXG4gIGhpZ2hsaWdodGVkVGV4dDogU2FmZUh0bWw7XG4gIGFjdGl2ZTogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdmFsdWU6IG51bWJlciB8IHN0cmluZyxcbiAgICAgICAgICAgICAgICBwdWJsaWMgdGV4dDogc3RyaW5nLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBkaXNhYmxlZDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICBwdWJsaWMgZGF0YTogYW55LFxuICAgICAgICAgICAgICAgIHByaXZhdGUgX3BhcmVudDogTmd4U2VsZWN0T3B0R3JvdXAgPSBudWxsKSB7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBwYXJlbnQoKTogTmd4U2VsZWN0T3B0R3JvdXAge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50O1xuICAgIH1cblxuICAgIHByaXZhdGUgY2FjaGVIaWdobGlnaHRUZXh0OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBjYWNoZVJlbmRlcmVkVGV4dDogU2FmZUh0bWwgPSBudWxsO1xuXG4gICAgcHVibGljIHJlbmRlclRleHQoc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIGhpZ2hsaWdodFRleHQ6IHN0cmluZyk6IFNhZmVIdG1sIHtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVIaWdobGlnaHRUZXh0ICE9PSBoaWdobGlnaHRUZXh0IHx8IHRoaXMuY2FjaGVSZW5kZXJlZFRleHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVIaWdobGlnaHRUZXh0ID0gaGlnaGxpZ2h0VGV4dDtcbiAgICAgICAgICAgIGlmICh0aGlzLmNhY2hlSGlnaGxpZ2h0VGV4dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVSZW5kZXJlZFRleHQgPSBzYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwoKHRoaXMudGV4dCArICcnKS5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKGVzY2FwZVN0cmluZyh0aGlzLmNhY2hlSGlnaGxpZ2h0VGV4dCksICdnaScpLCAnPHN0cm9uZz4kJjwvc3Ryb25nPidcbiAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZVJlbmRlcmVkVGV4dCA9IHNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbCh0aGlzLnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVuZGVyZWRUZXh0O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5neFNlbGVjdE9wdEdyb3VwIGltcGxlbWVudHMgSU5neFNlbGVjdE9wdEdyb3VwLCBJTmd4U2VsZWN0T3B0aW9uQmFzZSB7XG4gICAgcmVhZG9ubHkgdHlwZTogVE5neFNlbGVjdE9wdGlvblR5cGUgPSAnb3B0Z3JvdXAnO1xuXG4gICAgcHVibGljIG9wdGlvbnNGaWx0ZXJlZDogTmd4U2VsZWN0T3B0aW9uW107XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbGFiZWw6IHN0cmluZyxcbiAgICAgICAgICAgICAgICBwdWJsaWMgb3B0aW9uczogTmd4U2VsZWN0T3B0aW9uW10gPSBbXSkge1xuICAgICAgICB0aGlzLmZpbHRlcigoKSA9PiB0cnVlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZmlsdGVyKGNhbGxiYWNrRm46ICh2YWx1ZTogTmd4U2VsZWN0T3B0aW9uKSA9PiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5vcHRpb25zRmlsdGVyZWQgPSB0aGlzLm9wdGlvbnMuZmlsdGVyKChvcHRpb246IE5neFNlbGVjdE9wdGlvbikgPT4gY2FsbGJhY2tGbihvcHRpb24pKTtcbiAgICB9XG59XG5cbmV4cG9ydCB0eXBlIFRTZWxlY3RPcHRpb24gPSBOZ3hTZWxlY3RPcHRHcm91cCB8IE5neFNlbGVjdE9wdGlvbjtcbiJdfQ==