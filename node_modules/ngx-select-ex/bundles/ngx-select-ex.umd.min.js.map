{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ngx-select-ex/ngx-select/ngx-select.classes.ts","ng://ngx-select-ex/ngx-select/ngx-templates.directive.ts","ng://ngx-select-ex/ngx-select/ngx-select.component.ts","ng://ngx-select-ex/ngx-select/ngx-select.module.ts"],"names":["__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","escapeString","escapeStringNs","NgxSelectOption","text","disabled","data","_parent","this","prototype","renderText","sanitizer","highlightText","cacheHighlightText","cacheRenderedText","bypassSecurityTrustHtml","replace","RegExp","NgxSelectOptGroup","label","options","filter","callbackFn","optionsFiltered","option","NgxSelectOptionDirective","template","Directive","args","selector","TemplateRef","NgxSelectOptionSelectedDirective","NgxSelectOptionNotFoundDirective","_","lodashNs","NGX_SELECT_OPTIONS","InjectionToken","first","previous","last","firstSelected","firstIfOptionActiveInvisible","propertyExists","obj","propertyName","NgxSelectComponent","iterableDiffers","cd","defaultOptions","cacheExternalValue","_this","EventEmitter","BehaviorSubject","Subject","v","Object","assign","itemsDiffer","find","create","defaultValueDiffer","typed","subscribe","subjSearchText","subjOptionsSelected","selectionChanges","emit","subjActualValue","combineLatest","merge","subjExternalValue","pipe","map","concat","subjDefaultValue","_a","_b","eVal","dVal","newVal","isEqual","length","distinctUntilChanged","x","y","share","subjRegisterOnChange","actualValue","multiple","onChange","subjOptions","flatMap","from","of","EMPTY","toArray","optionsFlat","optionsSelected","forEach","selectedOption","keepSelectedItems","optionValues_1","keptSelectedOptions","selOption","indexOf","apply","__spread","arguments","markForCheck","selectedOptions","search","filterOptions","highlightedText","highlightOption","subOption","cacheOptionsFilteredFlat","navigateOption","ENavigation","optionsFilteredFlat","flatOptions","autoSelectSingleOption","inputElRef","nativeElement","setFormControlSize","otherClassNames","useFormControl","formControlExtraClasses","form-control-sm input-sm","size","form-control-lg input-lg","setBtnSize","btn-sm","btn-lg","mainClicked","event","clickedSelectComponent","isFocused","focus","documentClick","optionsOpened","optionsClose","detectChanges","blur","tap","navigation","newActiveIdx","navigated","index","activeOption","filteredOptionList","optionActive","idxOfOptionActive","newNavigated","optionActivate","ngDoCheck","diff","items","buildOptions","defVal","defaultValue","ngAfterContentChecked","_focusToInput","checkInputVisibility","document","activeElement","choiceMenuElRef","element","querySelector","offsetHeight","ensureVisibleElement","canClearNotMultiple","allowClear","focusToInput","inputKeyDown","keysForOpenedState","keyCodeToOptionsSelect","keyCodeToNavigateFirst","keyCodeToNavigatePrevious","keyCodeToNavigateNext","keyCodeToNavigateLast","keysForClosedState","keyCodeToOptionsOpen","keyCodeToRemoveSelected","code","preventDefault","stopPropagation","optionSelect","optionsOpen","optionRemove","trackByOption","noAutoComplete","inputKeyUp","keyCodeToOptionsClose","inputClick","sanitize","html","select","onTouched","remove","active","onMouseEnter","onmousemove","autoActiveOnMouseEnter","regExp","filterOption","searchCallback","test","subOp","cacheElementOffsetTop","offsetTop","container","scrollTop","clientHeight","open","close","autoClearSearch","result","Array","isArray","option_1","item","optGroupLabelField","optGroupOptionsField","optGroup_1","buildOption","parent","optionValueField","optionTextField","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","Component","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","IterableDiffers","DomSanitizer","ChangeDetectorRef","Inject","type","Optional","Input","Output","ViewChild","ContentChild","read","HostListener","NgxSelectModule","forRoot","ngModule","useValue","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {DomSanitizer, SafeHtml} from '@angular/platform-browser';\nimport * as escapeStringNs from 'escape-string-regexp';\nimport {INgxSelectOptGroup, INgxSelectOption, INgxSelectOptionBase, TNgxSelectOptionType} from './ngx-select.interfaces';\n\nconst escapeString = escapeStringNs;\n\nexport class NgxSelectOption implements INgxSelectOption, INgxSelectOptionBase {\n    readonly type: TNgxSelectOptionType = 'option';\n\n  highlightedText: SafeHtml;\n  active: boolean;\n\n  constructor(public value: number | string,\n                public text: string,\n                public disabled: boolean,\n                public data: any,\n                private _parent: NgxSelectOptGroup = null) {\n    }\n\n    public get parent(): NgxSelectOptGroup {\n        return this._parent;\n    }\n\n    private cacheHighlightText: string;\n    private cacheRenderedText: SafeHtml = null;\n\n    public renderText(sanitizer: DomSanitizer, highlightText: string): SafeHtml {\n        if (this.cacheHighlightText !== highlightText || this.cacheRenderedText === null) {\n            this.cacheHighlightText = highlightText;\n            if (this.cacheHighlightText) {\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml((this.text + '').replace(\n                    new RegExp(escapeString(this.cacheHighlightText), 'gi'), '<strong>$&</strong>'\n                ));\n            } else {\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml(this.text);\n            }\n        }\n        return this.cacheRenderedText;\n    }\n}\n\nexport class NgxSelectOptGroup implements INgxSelectOptGroup, INgxSelectOptionBase {\n    readonly type: TNgxSelectOptionType = 'optgroup';\n\n    public optionsFiltered: NgxSelectOption[];\n\n    constructor(public label: string,\n                public options: NgxSelectOption[] = []) {\n        this.filter(() => true);\n    }\n\n    public filter(callbackFn: (value: NgxSelectOption) => any): void {\n        this.optionsFiltered = this.options.filter((option: NgxSelectOption) => callbackFn(option));\n    }\n}\n\nexport type TSelectOption = NgxSelectOptGroup | NgxSelectOption;\n","import {Directive, TemplateRef} from '@angular/core';\n\n@Directive({selector: '[ngx-select-option]'})\nexport class NgxSelectOptionDirective {\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n\n@Directive({selector: '[ngx-select-option-selected]'})\nexport class NgxSelectOptionSelectedDirective {\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n\n@Directive({selector: '[ngx-select-option-not-found]'})\nexport class NgxSelectOptionNotFoundDirective {\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n","import {\n    AfterContentChecked, DoCheck, Input, Output, ViewChild,\n    Component, ElementRef, EventEmitter, forwardRef, HostListener, IterableDiffer, IterableDiffers, ChangeDetectorRef, ContentChild,\n    TemplateRef, Optional, Inject, InjectionToken, ChangeDetectionStrategy\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\nimport {Observable, Subject, BehaviorSubject, EMPTY, of, from, merge, combineLatest} from 'rxjs';\nimport {tap, filter, map, share, flatMap, toArray, distinctUntilChanged} from 'rxjs/operators';\nimport * as lodashNs from 'lodash';\nimport * as escapeStringNs from 'escape-string-regexp';\nimport {NgxSelectOptGroup, NgxSelectOption, TSelectOption} from './ngx-select.classes';\nimport {NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective} from './ngx-templates.directive';\nimport {INgxOptionNavigated, INgxSelectOption, INgxSelectOptions} from './ngx-select.interfaces';\n\nconst _ = lodashNs;\nconst escapeString = escapeStringNs;\n\nexport const NGX_SELECT_OPTIONS = new InjectionToken<any>('NGX_SELECT_OPTIONS');\n\nexport interface INgxSelectComponentMouseEvent extends MouseEvent {\n    clickedSelectComponent?: NgxSelectComponent;\n}\n\nenum ENavigation {\n    first, previous, next, last,\n    firstSelected, firstIfOptionActiveInvisible\n}\n\nfunction propertyExists(obj: Object, propertyName: string) {\n    return propertyName in obj;\n}\n\n@Component({\n    selector: 'ngx-select',\n    templateUrl: './ngx-select.component.html',\n    styleUrls: ['./ngx-select.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => NgxSelectComponent),\n            multi: true\n        }\n    ]\n})\nexport class NgxSelectComponent implements INgxSelectOptions, ControlValueAccessor, DoCheck, AfterContentChecked {\n    @Input() public items: any[];\n    @Input() public optionValueField = 'id';\n    @Input() public optionTextField = 'text';\n    @Input() public optGroupLabelField = 'label';\n    @Input() public optGroupOptionsField = 'options';\n    @Input() public multiple = false;\n    @Input() public allowClear = false;\n    @Input() public placeholder = '';\n    @Input() public noAutoComplete = false;\n    @Input() public disabled = false;\n    @Input() public defaultValue: any[] = [];\n    @Input() public autoSelectSingleOption = false;\n    @Input() public autoClearSearch = false;\n    @Input() public noResultsFound = 'No results found';\n    @Input() public keepSelectedItems: false;\n    @Input() public size: 'small' | 'default' | 'large' = 'default';\n    @Input() public searchCallback: (search: string, item: INgxSelectOption) => boolean;\n    @Input() public autoActiveOnMouseEnter = true;\n    @Input() public isFocused = false;\n    public keyCodeToRemoveSelected = 'Delete';\n    public keyCodeToOptionsOpen = ['Enter', 'NumpadEnter'];\n    public keyCodeToOptionsClose = 'Escape';\n    public keyCodeToOptionsSelect = ['Enter', 'NumpadEnter'];\n    public keyCodeToNavigateFirst = 'ArrowLeft';\n    public keyCodeToNavigatePrevious = 'ArrowUp';\n    public keyCodeToNavigateNext = 'ArrowDown';\n    public keyCodeToNavigateLast = 'ArrowRight';\n\n    @Output() public typed = new EventEmitter<string>();\n    @Output() public focus = new EventEmitter<void>();\n    @Output() public blur = new EventEmitter<void>();\n    @Output() public open = new EventEmitter<void>();\n    @Output() public close = new EventEmitter<void>();\n    @Output() public select = new EventEmitter<any>();\n    @Output() public remove = new EventEmitter<any>();\n    @Output() public navigated = new EventEmitter<INgxOptionNavigated>();\n    @Output() public selectionChanges = new EventEmitter<INgxSelectOption[]>();\n\n    @ViewChild('main') protected mainElRef: ElementRef;\n    @ViewChild('input') protected inputElRef: ElementRef;\n    @ViewChild('choiceMenu') protected choiceMenuElRef: ElementRef;\n\n    @ContentChild(NgxSelectOptionDirective, {read: TemplateRef}) templateOption: NgxSelectOptionDirective;\n    @ContentChild(NgxSelectOptionSelectedDirective, {read: TemplateRef}) templateSelectedOption: NgxSelectOptionSelectedDirective;\n    @ContentChild(NgxSelectOptionNotFoundDirective, {read: TemplateRef}) templateOptionNotFound: NgxSelectOptionNotFoundDirective;\n\n    public optionsOpened = false;\n    public optionsFiltered: TSelectOption[];\n\n    private optionActive: NgxSelectOption;\n    private itemsDiffer: IterableDiffer<any>;\n    private defaultValueDiffer: IterableDiffer<any[]>;\n    private actualValue: any[] = [];\n\n    public subjOptions = new BehaviorSubject<TSelectOption[]>([]);\n    private subjSearchText = new BehaviorSubject<string>('');\n\n    private subjOptionsSelected = new BehaviorSubject<NgxSelectOption[]>([]);\n    private subjExternalValue = new BehaviorSubject<any[]>([]);\n    private subjDefaultValue = new BehaviorSubject<any[]>([]);\n    private subjRegisterOnChange = new Subject();\n\n    private cacheOptionsFilteredFlat: NgxSelectOption[];\n    private cacheElementOffsetTop: number;\n\n    private _focusToInput = false;\n\n    /** @internal */\n    public get inputText() {\n        if (this.inputElRef && this.inputElRef.nativeElement) {\n            return this.inputElRef.nativeElement.value;\n        }\n        return '';\n    }\n\n    constructor(iterableDiffers: IterableDiffers, private sanitizer: DomSanitizer, private cd: ChangeDetectorRef,\n                @Inject(NGX_SELECT_OPTIONS) @Optional() defaultOptions: INgxSelectOptions) {\n        Object.assign(this, defaultOptions);\n\n        // DIFFERS\n        this.itemsDiffer = iterableDiffers.find([]).create<any>(null);\n        this.defaultValueDiffer = iterableDiffers.find([]).create<any>(null);\n\n        // OBSERVERS\n        this.typed.subscribe((text: string) => this.subjSearchText.next(text));\n        this.subjOptionsSelected.subscribe((options: NgxSelectOption[]) => this.selectionChanges.emit(options));\n        let cacheExternalValue: any[];\n\n        // Get actual value\n        const subjActualValue = combineLatest(\n            merge(\n                this.subjExternalValue.pipe(map(\n                    (v: any[]) => cacheExternalValue = v === null ? [] : [].concat(v)\n                )),\n                this.subjOptionsSelected.pipe(map(\n                    (options: NgxSelectOption[]) => options.map((o: NgxSelectOption) => o.value)\n                ))\n            ),\n            this.subjDefaultValue\n        ).pipe(\n            map(([eVal, dVal]: [any[], any[]]) => {\n                const newVal = _.isEqual(eVal, dVal) ? [] : eVal;\n                return newVal.length ? newVal : dVal;\n            }),\n            distinctUntilChanged((x, y) => _.isEqual(x, y)),\n            share()\n        );\n\n        // Export actual value\n        combineLatest(subjActualValue, this.subjRegisterOnChange)\n            .pipe(map(([actualValue]: [any[], any[]]) => actualValue))\n            .subscribe((actualValue: any[]) => {\n                this.actualValue = actualValue;\n                if (!_.isEqual(actualValue, cacheExternalValue)) {\n                    cacheExternalValue = actualValue;\n                    if (this.multiple) {\n                        this.onChange(actualValue);\n                    } else {\n                        this.onChange(actualValue.length ? actualValue[0] : null);\n                    }\n                }\n            });\n\n        // Correct selected options when the options changed\n        combineLatest(\n            this.subjOptions.pipe(\n                flatMap((options: TSelectOption[]) => from(options).pipe(\n                    flatMap((option: TSelectOption) => option instanceof NgxSelectOption\n                        ? of(option)\n                        : (option instanceof NgxSelectOptGroup ? from(option.options) : EMPTY)\n                    ),\n                    toArray()\n                ))\n            ),\n            subjActualValue\n        ).pipe(\n            map(([optionsFlat, actualValue]: [NgxSelectOption[], any[]]) => {\n                const optionsSelected = [];\n\n                actualValue.forEach((value: any) => {\n                    const selectedOption = optionsFlat.find((option: NgxSelectOption) => option.value === value);\n                    if (selectedOption) {\n                        optionsSelected.push(selectedOption);\n                    }\n                });\n\n                if (this.keepSelectedItems) {\n                    const optionValues = optionsSelected.map((option: NgxSelectOption) => option.value);\n                    const keptSelectedOptions = this.subjOptionsSelected.value\n                        .filter((selOption: NgxSelectOption) => optionValues.indexOf(selOption.value) === -1);\n                    optionsSelected.push(...keptSelectedOptions);\n                }\n\n                if (!_.isEqual(optionsSelected, this.subjOptionsSelected.value)) {\n                    this.subjOptionsSelected.next(optionsSelected);\n                    this.cd.markForCheck();\n                }\n\n            })\n        ).subscribe();\n\n        // Ensure working filter by a search text\n        combineLatest(this.subjOptions, this.subjOptionsSelected, this.subjSearchText).pipe(\n            map(([options, selectedOptions, search]: [TSelectOption[], NgxSelectOption[], string]) => {\n                this.optionsFiltered = this.filterOptions(search, options, selectedOptions).map(option => {\n                    if (option instanceof NgxSelectOption) {\n                        option.highlightedText = this.highlightOption(option);\n                    } else if (option instanceof NgxSelectOptGroup) {\n                        option.options.map(subOption => {\n                            subOption.highlightedText = this.highlightOption(subOption);\n                            return subOption;\n                        });\n                    }\n                    return option;\n                });\n                this.cacheOptionsFilteredFlat = null;\n                this.navigateOption(ENavigation.firstIfOptionActiveInvisible);\n                this.cd.markForCheck();\n                return selectedOptions;\n            }),\n            flatMap((selectedOptions: NgxSelectOption[]) => this.optionsFilteredFlat().pipe(filter(\n                (flatOptions: NgxSelectOption[]) => this.autoSelectSingleOption && flatOptions.length === 1 && !selectedOptions.length\n            )))\n        ).subscribe((flatOptions: NgxSelectOption[]) => {\n            this.subjOptionsSelected.next(flatOptions);\n            this.cd.markForCheck();\n        });\n    }\n\n    public setFormControlSize(otherClassNames: Object = {}, useFormControl: boolean = true) {\n        const formControlExtraClasses = useFormControl ? {\n            'form-control-sm input-sm': this.size === 'small',\n            'form-control-lg input-lg': this.size === 'large'\n        } : {};\n        return Object.assign(formControlExtraClasses, otherClassNames);\n    }\n\n    public setBtnSize() {\n        return {'btn-sm': this.size === 'small', 'btn-lg': this.size === 'large'};\n    }\n\n    public get optionsSelected(): NgxSelectOption[] {\n        return this.subjOptionsSelected.value;\n    }\n\n    public mainClicked(event: INgxSelectComponentMouseEvent) {\n        event.clickedSelectComponent = this;\n        if (!this.isFocused) {\n            this.isFocused = true;\n            this.focus.emit();\n        }\n    }\n\n    @HostListener('document:focusin', ['$event'])\n    @HostListener('document:click', ['$event'])\n    public documentClick(event: INgxSelectComponentMouseEvent) {\n        if (event.clickedSelectComponent !== this) {\n            if (this.optionsOpened) {\n                this.optionsClose();\n                this.cd.detectChanges(); // fix error because of delay between different events\n            }\n            if (this.isFocused) {\n                this.isFocused = false;\n                this.blur.emit();\n            }\n        }\n    }\n\n    private optionsFilteredFlat(): Observable<NgxSelectOption[]> {\n        if (this.cacheOptionsFilteredFlat) {\n            return of(this.cacheOptionsFilteredFlat);\n        }\n\n        return from(this.optionsFiltered).pipe(\n            flatMap<TSelectOption, NgxSelectOption>((option: TSelectOption) =>\n                option instanceof NgxSelectOption ? of(option) :\n                    (option instanceof NgxSelectOptGroup ? from(option.optionsFiltered) : EMPTY)\n            ),\n            filter((optionsFilteredFlat: NgxSelectOption) => !optionsFilteredFlat.disabled),\n            toArray(),\n            tap((optionsFilteredFlat: NgxSelectOption[]) => this.cacheOptionsFilteredFlat = optionsFilteredFlat)\n        );\n    }\n\n    private navigateOption(navigation: ENavigation) {\n        this.optionsFilteredFlat().pipe(\n            map<NgxSelectOption[], INgxOptionNavigated>((options: NgxSelectOption[]) => {\n                const navigated: INgxOptionNavigated = {index: -1, activeOption: null, filteredOptionList: options};\n                let newActiveIdx;\n                switch (navigation) {\n                    case ENavigation.first:\n                        navigated.index = 0;\n                        break;\n                    case ENavigation.previous:\n                        newActiveIdx = options.indexOf(this.optionActive) - 1;\n                        navigated.index = newActiveIdx >= 0 ? newActiveIdx : options.length - 1;\n                        break;\n                    case ENavigation.next:\n                        newActiveIdx = options.indexOf(this.optionActive) + 1;\n                        navigated.index = newActiveIdx < options.length ? newActiveIdx : 0;\n                        break;\n                    case ENavigation.last:\n                        navigated.index = options.length - 1;\n                        break;\n                    case ENavigation.firstSelected:\n                        if (this.subjOptionsSelected.value.length) {\n                            navigated.index = options.indexOf(this.subjOptionsSelected.value[0]);\n                        }\n                        break;\n                    case ENavigation.firstIfOptionActiveInvisible:\n                        let idxOfOptionActive = -1;\n                        if (this.optionActive) {\n                            idxOfOptionActive = options.indexOf(options.find(x => x.value === this.optionActive.value));\n                        }\n                        navigated.index = idxOfOptionActive > 0 ? idxOfOptionActive : 0;\n                        break;\n                }\n                navigated.activeOption = options[navigated.index];\n                return navigated;\n            })\n        ).subscribe((newNavigated: INgxOptionNavigated) => this.optionActivate(newNavigated));\n    }\n\n    public ngDoCheck(): void {\n        if (this.itemsDiffer.diff(this.items)) {\n            this.subjOptions.next(this.buildOptions(this.items));\n        }\n\n        const defVal = this.defaultValue ? [].concat(this.defaultValue) : [];\n        if (this.defaultValueDiffer.diff(defVal)) {\n            this.subjDefaultValue.next(defVal);\n        }\n    }\n\n    public ngAfterContentChecked(): void {\n        if (this._focusToInput && this.checkInputVisibility() && this.inputElRef &&\n            this.inputElRef.nativeElement !== document.activeElement) {\n            this._focusToInput = false;\n            this.inputElRef.nativeElement.focus();\n        }\n\n        if (this.choiceMenuElRef) {\n            const ulElement = this.choiceMenuElRef.nativeElement as HTMLUListElement;\n            const element = ulElement.querySelector('a.ngx-select__item_active.active') as HTMLLinkElement;\n\n            if (element && element.offsetHeight > 0) {\n                this.ensureVisibleElement(element);\n            }\n\n        }\n    }\n\n    public canClearNotMultiple(): boolean {\n        return this.allowClear && !!this.subjOptionsSelected.value.length &&\n            (!this.subjDefaultValue.value.length || this.subjDefaultValue.value[0] !== this.actualValue[0]);\n    }\n\n    public focusToInput(): void {\n        this._focusToInput = true;\n    }\n\n    public inputKeyDown(event: KeyboardEvent) {\n        const keysForOpenedState = [].concat(\n            this.keyCodeToOptionsSelect,\n            this.keyCodeToNavigateFirst,\n            this.keyCodeToNavigatePrevious,\n            this.keyCodeToNavigateNext,\n            this.keyCodeToNavigateLast\n        );\n        const keysForClosedState = [].concat(this.keyCodeToOptionsOpen, this.keyCodeToRemoveSelected);\n\n        if (this.optionsOpened && keysForOpenedState.indexOf(event.code) !== -1) {\n            event.preventDefault();\n            event.stopPropagation();\n            switch (event.code) {\n                case ([].concat(this.keyCodeToOptionsSelect).indexOf(event.code) + 1) && event.code:\n                    this.optionSelect(this.optionActive);\n                    this.navigateOption(ENavigation.next);\n                    break;\n                case this.keyCodeToNavigateFirst:\n                    this.navigateOption(ENavigation.first);\n                    break;\n                case this.keyCodeToNavigatePrevious:\n                    this.navigateOption(ENavigation.previous);\n                    break;\n                case this.keyCodeToNavigateLast:\n                    this.navigateOption(ENavigation.last);\n                    break;\n                case this.keyCodeToNavigateNext:\n                    this.navigateOption(ENavigation.next);\n                    break;\n            }\n        } else if (!this.optionsOpened && keysForClosedState.indexOf(event.code) !== -1) {\n            event.preventDefault();\n            event.stopPropagation();\n            switch (event.code) {\n                case ([].concat(this.keyCodeToOptionsOpen).indexOf(event.code) + 1) && event.code:\n                    this.optionsOpen();\n                    break;\n                case this.keyCodeToRemoveSelected:\n                    this.optionRemove(this.subjOptionsSelected.value[this.subjOptionsSelected.value.length - 1], event);\n                    break;\n            }\n        }\n    }\n\n    public trackByOption(index: number, option: TSelectOption) {\n        return option instanceof NgxSelectOption ? option.value :\n            (option instanceof NgxSelectOptGroup ? option.label : option);\n    }\n\n    public checkInputVisibility(): boolean {\n        return (this.multiple === true) || (this.optionsOpened && !this.noAutoComplete);\n    }\n\n    /** @internal */\n    public inputKeyUp(value: string = '', event: KeyboardEvent) {\n        if (event.code === this.keyCodeToOptionsClose) {\n            this.optionsClose(/*true*/);\n        } else if (this.optionsOpened && (['ArrowDown', 'ArrowUp', 'ArrowLeft', 'ArrowDown'].indexOf(event.code) === -1)/*ignore arrows*/) {\n            this.typed.emit(value);\n        } else if (!this.optionsOpened && value) {\n            this.optionsOpen(value);\n        }\n    }\n\n    /** @internal */\n    public inputClick(value: string = '') {\n        if (!this.optionsOpened) {\n            this.optionsOpen(value);\n        }\n    }\n\n    /** @internal */\n    public sanitize(html: string): SafeHtml {\n        return html ? this.sanitizer.bypassSecurityTrustHtml(html) : null;\n    }\n\n    /** @internal */\n    public highlightOption(option: NgxSelectOption): SafeHtml {\n        if (this.inputElRef) {\n            return option.renderText(this.sanitizer, this.inputElRef.nativeElement.value);\n        }\n        return option.renderText(this.sanitizer, '');\n    }\n\n    /** @internal */\n    public optionSelect(option: NgxSelectOption, event: Event = null): void {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        if (option && !option.disabled) {\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).concat([option]));\n            this.select.emit(option.value);\n            this.optionsClose(/*true*/);\n            this.onTouched();\n        }\n    }\n\n    /** @internal */\n    public optionRemove(option: NgxSelectOption, event: Event): void {\n        if (!this.disabled && option) {\n            event.stopPropagation();\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).filter(o => o !== option));\n            this.remove.emit(option.value);\n        }\n    }\n\n    /** @internal */\n    public optionActivate(navigated: INgxOptionNavigated): void {\n        if ((this.optionActive !== navigated.activeOption) &&\n            (!navigated.activeOption || !navigated.activeOption.disabled)) {\n            if (this.optionActive) {\n                this.optionActive.active = false;\n            }\n\n            this.optionActive = navigated.activeOption;\n\n            if (this.optionActive) {\n                this.optionActive.active = true;\n            }\n            this.navigated.emit(navigated);\n            this.cd.detectChanges();\n        }\n    }\n\n    /** @internal */\n    public onMouseEnter(navigated: INgxOptionNavigated): void {\n        document.onmousemove = () => {\n            if (this.autoActiveOnMouseEnter) {\n                this.optionActivate(navigated);\n            }\n        };\n    }\n\n    private filterOptions(search: string, options: TSelectOption[], selectedOptions: NgxSelectOption[]): TSelectOption[] {\n        const regExp = new RegExp(escapeString(search), 'i'),\n            filterOption = (option: NgxSelectOption) => {\n                if (this.searchCallback) {\n                    return this.searchCallback(search, option);\n                }\n                return (!search || regExp.test(option.text)) && (!this.multiple || selectedOptions.indexOf(option) === -1);\n            };\n\n        return options.filter((option: TSelectOption) => {\n            if (option instanceof NgxSelectOption) {\n                return filterOption(<NgxSelectOption>option);\n            } else if (option instanceof NgxSelectOptGroup) {\n                const subOp = <NgxSelectOptGroup>option;\n                subOp.filter((subOption: NgxSelectOption) => filterOption(subOption));\n                return subOp.optionsFiltered.length;\n            }\n        });\n    }\n\n    private ensureVisibleElement(element: HTMLElement) {\n        if (this.choiceMenuElRef && this.cacheElementOffsetTop !== element.offsetTop) {\n            this.cacheElementOffsetTop = element.offsetTop;\n            const container: HTMLElement = this.choiceMenuElRef.nativeElement;\n            if (this.cacheElementOffsetTop < container.scrollTop) {\n                container.scrollTop = this.cacheElementOffsetTop;\n            } else if (this.cacheElementOffsetTop + element.offsetHeight > container.scrollTop + container.clientHeight) {\n                container.scrollTop = this.cacheElementOffsetTop + element.offsetHeight - container.clientHeight;\n            }\n        }\n    }\n\n    public optionsOpen(search: string = '') {\n        if (!this.disabled) {\n            this.optionsOpened = true;\n            this.subjSearchText.next(search);\n            if (!this.multiple && this.subjOptionsSelected.value.length) {\n                this.navigateOption(ENavigation.firstSelected);\n            } else {\n                this.navigateOption(ENavigation.first);\n            }\n            this.focusToInput();\n            this.open.emit();\n            this.cd.markForCheck();\n        }\n    }\n\n    public optionsClose(/*focusToHost: boolean = false*/) {\n        this.optionsOpened = false;\n        // if (focusToHost) {\n        //     const x = window.scrollX, y = window.scrollY;\n        //     this.mainElRef.nativeElement.focus();\n        //     window.scrollTo(x, y);\n        // }\n        this.close.emit();\n\n        if (this.autoClearSearch && this.multiple && this.inputElRef) {\n            this.inputElRef.nativeElement.value = null;\n        }\n    }\n\n    private buildOptions(data: any[]): Array<NgxSelectOption | NgxSelectOptGroup> {\n        const result: Array<NgxSelectOption | NgxSelectOptGroup> = [];\n        if (Array.isArray(data)) {\n            let option: NgxSelectOption;\n            data.forEach((item: any) => {\n                const isOptGroup = typeof item === 'object' && item !== null &&\n                    propertyExists(item, this.optGroupLabelField) && propertyExists(item, this.optGroupOptionsField) &&\n                    Array.isArray(item[this.optGroupOptionsField]);\n                if (isOptGroup) {\n                    const optGroup = new NgxSelectOptGroup(item[this.optGroupLabelField]);\n                    item[this.optGroupOptionsField].forEach((subOption: NgxSelectOption) => {\n                        if (option = this.buildOption(subOption, optGroup)) {\n                            optGroup.options.push(option);\n                        }\n                    });\n                    result.push(optGroup);\n                } else if (option = this.buildOption(item, null)) {\n                    result.push(option);\n                }\n            });\n        }\n        return result;\n    }\n\n    private buildOption(data: any, parent: NgxSelectOptGroup): NgxSelectOption {\n        let value, text, disabled;\n        if (typeof data === 'string' || typeof data === 'number') {\n            value = text = data;\n            disabled = false;\n        } else if (typeof data === 'object' && data !== null &&\n            (propertyExists(data, this.optionValueField) || propertyExists(data, this.optionTextField))) {\n            value = propertyExists(data, this.optionValueField) ? data[this.optionValueField] : data[this.optionTextField];\n            text = propertyExists(data, this.optionTextField) ? data[this.optionTextField] : data[this.optionValueField];\n            disabled = propertyExists(data, 'disabled') ? data['disabled'] : false;\n        } else {\n            return null;\n        }\n        return new NgxSelectOption(value, text, disabled, data, parent);\n    }\n\n    //////////// interface ControlValueAccessor ////////////\n    public onChange = (v: any) => v;\n\n    public onTouched: () => void = () => null;\n\n    public writeValue(obj: any): void {\n        this.subjExternalValue.next(obj);\n    }\n\n    public registerOnChange(fn: (_: any) => {}): void {\n        this.onChange = fn;\n        this.subjRegisterOnChange.next();\n    }\n\n    public registerOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.cd.markForCheck();\n    }\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NGX_SELECT_OPTIONS, NgxSelectComponent} from './ngx-select.component';\nimport {NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective} from './ngx-templates.directive';\nimport {INgxSelectOptions} from './ngx-select.interfaces';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [NgxSelectComponent,\n        NgxSelectOptionDirective, NgxSelectOptionSelectedDirective, NgxSelectOptionNotFoundDirective\n    ],\n    exports: [NgxSelectComponent,\n        NgxSelectOptionDirective, NgxSelectOptionSelectedDirective, NgxSelectOptionNotFoundDirective\n    ]\n})\nexport class NgxSelectModule {\n    static forRoot(options: INgxSelectOptions): ModuleWithProviders {\n        return {\n            ngModule: NgxSelectModule,\n            providers: [{provide: NGX_SELECT_OPTIONS, useValue: options}]\n        };\n    }\n}\n"]}